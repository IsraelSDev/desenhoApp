{"ast":null,"code":"var _jsxFileName = \"D:\\\\Projetos\\\\drawapp\\\\src\\\\Canvas.jsx\";\nimport React from \"react\";\nimport { ReactSketchCanvas } from \"react-sketch-canvas\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst styles = {\n  border: \"0.0625rem solid #9c9c9c\",\n  borderRadius: \"0.25rem\"\n};\nconst Canvas = class extends React.Component {\n  constructor(props) {\n    super(props);\n    this.canvas = /*#__PURE__*/React.createRef();\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(ReactSketchCanvas, {\n        ref: this.canvas,\n        strokeWidth: 5,\n        strokeColor: \"black\",\n        height: \"500px\",\n        backgroundImage: \"https://upload.wikimedia.org/wikipedia/commons/7/70/Graph_paper_scan_1600x1000_%286509259561%29.jpg\",\n        preserveBackgroundImageAspectRatio: \"none\",\n        exportWithBackgroundImage: false,\n        withTimestamp: true,\n        text: [{\n          text: 'THIS IS YOUR TEXT',\n          fontSize: 40,\n          position: {\n            x: 0.5,\n            y: 0.01\n          },\n          anchor: {\n            x: 0.5,\n            y: 0\n          },\n          coordinate: 'Ratio',\n          overlay: 'TextOnSketch',\n          fontColor: 'black',\n          alignment: 'Center'\n        }]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => {\n          this.canvas.current.exportSvg().then(data => {\n            var svgData = data;\n            var svgBlob = new Blob([svgData], {\n              type: \"image/svg+xml;charset=utf-8\"\n            });\n            var svgUrl = URL.createObjectURL(svgBlob);\n            var downloadLink = document.createElement(\"a\");\n            downloadLink.href = svgUrl;\n            downloadLink.download = \"paint.svg\";\n            document.body.appendChild(downloadLink);\n            downloadLink.click();\n            document.body.removeChild(downloadLink);\n          }).catch(e => {\n            console.log(e);\n          });\n        },\n        children: \"Get Image\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => {\n          this.canvas.current.clearCanvas();\n        },\n        children: \"Clear Image\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 7\n    }, this);\n  }\n\n};\nvar canvas = document.getElementById('myCanvas'),\n    ctx = canvas.getContext('2d'),\n    font = '14px sans-serif',\n    hasInput = false;\n\ncanvas.onclick = function (e) {\n  if (hasInput) return;\n  addInput(e.clientX, e.clientY);\n}; //Function to dynamically add an input box: \n\n\nfunction addInput(x, y) {\n  var input = document.createElement('input');\n  input.type = 'text';\n  input.style.position = 'fixed';\n  input.style.left = x - 4 + 'px';\n  input.style.top = y - 4 + 'px';\n  input.onkeydown = handleEnter;\n  document.body.appendChild(input);\n  input.focus();\n  hasInput = true;\n} //Key handler for input box:\n\n\nfunction handleEnter(e) {\n  var keyCode = e.keyCode;\n\n  if (keyCode === 13) {\n    drawText(this.value, parseInt(this.style.left, 10), parseInt(this.style.top, 10));\n    document.body.removeChild(this);\n    hasInput = false;\n  }\n} //Draw the text onto canvas:\n\n\nfunction drawText(txt, x, y) {\n  ctx.textBaseline = 'top';\n  ctx.textAlign = 'left';\n  ctx.font = font;\n  ctx.fillText(txt, x - 4, y - 4);\n}\n\nexport default Canvas;","map":{"version":3,"sources":["D:/Projetos/drawapp/src/Canvas.jsx"],"names":["React","ReactSketchCanvas","styles","border","borderRadius","Canvas","Component","constructor","props","canvas","createRef","render","text","fontSize","position","x","y","anchor","coordinate","overlay","fontColor","alignment","current","exportSvg","then","data","svgData","svgBlob","Blob","type","svgUrl","URL","createObjectURL","downloadLink","document","createElement","href","download","body","appendChild","click","removeChild","catch","e","console","log","clearCanvas","getElementById","ctx","getContext","font","hasInput","onclick","addInput","clientX","clientY","input","style","left","top","onkeydown","handleEnter","focus","keyCode","drawText","value","parseInt","txt","textBaseline","textAlign","fillText"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport { ReactSketchCanvas } from \"react-sketch-canvas\";\r\n\r\nconst styles = {\r\n  border: \"0.0625rem solid #9c9c9c\",\r\n  borderRadius: \"0.25rem\"\r\n};\r\n\r\nconst Canvas = class extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.canvas = React.createRef();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <ReactSketchCanvas\r\n          ref={this.canvas}\r\n          strokeWidth={5}\r\n          strokeColor=\"black\"\r\n          height=\"500px\"\r\n          backgroundImage=\"https://upload.wikimedia.org/wikipedia/commons/7/70/Graph_paper_scan_1600x1000_%286509259561%29.jpg\"\r\n          preserveBackgroundImageAspectRatio=\"none\"\r\n          exportWithBackgroundImage={false}\r\n          withTimestamp={true}\r\n          text={[{\r\n            text: 'THIS IS YOUR TEXT',\r\n            fontSize: 40,\r\n            position: { x: 0.5, y: 0.01 },\r\n            anchor: { x: 0.5, y: 0 },\r\n            coordinate: 'Ratio',\r\n            overlay: 'TextOnSketch',\r\n            fontColor: 'black',\r\n            alignment: 'Center'\r\n          }]}\r\n        />\r\n        <button\r\n          onClick={() => {\r\n            this.canvas.current.exportSvg()\r\n              .then(data => {\r\n                var svgData = data;\r\n                var svgBlob = new Blob([svgData], { type: \"image/svg+xml;charset=utf-8\" });\r\n                var svgUrl = URL.createObjectURL(svgBlob);\r\n                var downloadLink = document.createElement(\"a\");\r\n                downloadLink.href = svgUrl;\r\n                downloadLink.download = \"paint.svg\";\r\n                document.body.appendChild(downloadLink);\r\n                downloadLink.click();\r\n                document.body.removeChild(downloadLink);\r\n              }).catch(e => {\r\n                console.log(e)\r\n              })\r\n          }}\r\n        >\r\n          Get Image\r\n        </button>\r\n        <button\r\n          onClick={() => {\r\n            this.canvas.current.clearCanvas()\r\n          }}\r\n        >\r\n          Clear Image\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n\r\n};\r\nvar canvas = document.getElementById('myCanvas'),\r\n  ctx = canvas.getContext('2d'),\r\n  font = '14px sans-serif',\r\n  hasInput = false;\r\n\r\ncanvas.onclick = function (e) {\r\n  if (hasInput) return;\r\n  addInput(e.clientX, e.clientY);\r\n}\r\n\r\n//Function to dynamically add an input box: \r\nfunction addInput(x, y) {\r\n\r\n  var input = document.createElement('input');\r\n\r\n  input.type = 'text';\r\n  input.style.position = 'fixed';\r\n  input.style.left = (x - 4) + 'px';\r\n  input.style.top = (y - 4) + 'px';\r\n\r\n  input.onkeydown = handleEnter;\r\n\r\n  document.body.appendChild(input);\r\n\r\n  input.focus();\r\n\r\n  hasInput = true;\r\n}\r\n\r\n//Key handler for input box:\r\nfunction handleEnter(e) {\r\n  var keyCode = e.keyCode;\r\n  if (keyCode === 13) {\r\n    drawText(this.value, parseInt(this.style.left, 10), parseInt(this.style.top, 10));\r\n    document.body.removeChild(this);\r\n    hasInput = false;\r\n  }\r\n}\r\n\r\n//Draw the text onto canvas:\r\nfunction drawText(txt, x, y) {\r\n  ctx.textBaseline = 'top';\r\n  ctx.textAlign = 'left';\r\n  ctx.font = font;\r\n  ctx.fillText(txt, x - 4, y - 4);\r\n}\r\n\r\nexport default Canvas;"]},"metadata":{},"sourceType":"module"}